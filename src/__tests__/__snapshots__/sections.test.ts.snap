// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`sections getAllSections returns all sections from a given document 1`] = `
[
  {
    "level": 2,
    "name": "Syntax",
    "position": 1,
  },
  {
    "level": 3,
    "name": "Parameters",
    "position": 2,
  },
  {
    "level": 3,
    "name": "Return value",
    "position": 3,
  },
  {
    "level": 2,
    "name": "Description",
    "position": 4,
  },
  {
    "level": 2,
    "name": "Examples",
    "position": 5,
  },
  {
    "level": 3,
    "name": "Mapping an array of numbers to an array of square roots",
    "position": 6,
  },
  {
    "level": 3,
    "name": "Using map to reformat objects in an array",
    "position": 7,
  },
  {
    "level": 3,
    "name": "Using parseInt() with map()",
    "position": 8,
  },
  {
    "level": 3,
    "name": "Mapped array contains undefined",
    "position": 9,
  },
  {
    "level": 3,
    "name": "Side-effectful mapping",
    "position": 10,
  },
  {
    "level": 3,
    "name": "Using the third argument of callbackFn",
    "position": 11,
  },
  {
    "level": 3,
    "name": "Using map() on sparse arrays",
    "position": 12,
  },
  {
    "level": 3,
    "name": "Calling map() on non-array objects",
    "position": 13,
  },
  {
    "level": 2,
    "name": "Specifications",
    "position": 14,
  },
  {
    "level": 2,
    "name": "Browser compatibility",
    "position": 15,
  },
  {
    "level": 2,
    "name": "See also",
    "position": 16,
  },
]
`;

exports[`sections getFirstSection properly returns a section with the provided name 1`] = `
"## Description

The \`map()\` method is an [iterative method](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods). It calls a provided \`callbackFn\` function once for each element in an array and constructs a new array from the results. Read the [iterative methods](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods) section for more information about how these methods work in general.

\`callbackFn\` is invoked only for array indexes which have assigned values. It is not invoked for empty slots in [sparse arrays](/en-US/docs/Web/JavaScript/Guide/Indexed_collections#sparse_arrays).

The \`map()\` method is [generic](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#generic_array_methods). It only expects the \`this\` value to have a \`length\` property and integer-keyed properties.

Since \`map\` builds a new array, calling it without using the returned array is an anti-pattern; use {{jsxref("Array/forEach", "forEach")}} or {{jsxref("Statements/for...of", "for...of")}} instead.
"
`;

exports[`sections getFirstSection properly returns a section with the provided name 2`] = `
"## Accessibility concerns

Use of the \`title\` attribute is highly problematic for:

- People using touch-only devices
- People navigating with keyboards
- People navigating with assistive technology such as screen readers or magnifiers
- People experiencing fine motor control impairment
- People with cognitive concerns

This is due to inconsistent browser support, compounded by the additional assistive technology parsing of the browser-rendered page. If a tooltip effect is desired, it is better to [use a more accessible technique](https://inclusive-components.design/tooltips-toggletips/) that can be accessed with the above browsing methods.

- [3.2.5.1. The title attribute | W3C HTML 5.2: 3. Semantics, structure, and APIs of HTML documents](https://html.spec.whatwg.org/multipage/dom.html#the-title-attribute)
- [Using the HTML title attribute â€“ updated | The Paciello Group](https://www.tpgi.com/using-the-html-title-attribute-updated/)
- [Tooltips & Toggletips - Inclusive Components](https://inclusive-components.design/tooltips-toggletips/)
- [The Trials and Tribulations of the Title Attribute - 24 Accessibility](https://www.24a11y.com/2017/the-trials-and-tribulations-of-the-title-attribute/)
"
`;

exports[`sections getFirstSection properly returns a section with the provided name 3`] = `
"## Syntax

\`\`\`css
/* Named colors */
rebeccapurple
aliceblue

/* RGB Hexadecimal */
#f09
#ff0099

/* RGB (Red, Green, Blue) */
rgb(255 0 153)
rgb(255 0 153 / 80%)

/* HSL (Hue, Saturation, Lightness) */
hsl(150 30% 60%)
hsl(150 30% 60% / 80%)

/* HWB (Hue, Whiteness, Blackness) */
hwb(12 50% 0%)
hwb(194 0% 0% / 0.5)

/* LAB (Lightness, A-axis, B-axis) */
lab(50% 40 59.5)
lab(50% 40 59.5 / 0.5)

/* LCH (Lightness, Chroma, Hue) */
lch(52.2% 72.2 50)
lch(52.2% 72.2 50 / 0.5)

/* Oklab (Lightness, A-axis, B-axis) */
oklab(59% 0.1 0.1)
oklab(59% 0.1 0.1 / 0.5)

/* Oklch (Lightness, Chroma, Hue) */
oklch(60% 0.15 50)
oklch(60% 0.15 50 / 0.5)

/* Relative CSS colors */
/* HSL hue change */
hsl(from red 240deg s l)
/* HWB alpha channel change */
hwb(from green h w b / 0.5)
/* LCH lightness change */
lch(from blue calc(l + 20) c h)

/* light-dark */
light-dark(white, black)
light-dark(rgb(255 255 255), rgb(0 0 0))
\`\`\`

A \`<color>\` value can be specified using one of the methods listed below:

- By keywords: {{CSSXref("&lt;named-color&gt;")}} (such as \`blue\` or \`pink\`), {{CSSXref("&lt;system-color&gt;")}}, and [\`currentcolor\`](#currentcolor_keyword).
- By hexadecimal notations: {{CSSXref("&lt;hex-color&gt;")}} (such as \`#ff0000\`).
- By \`<color-function>\`, with parameters in a {{glossary("color space")}} using functional notations:
  - [sRGB](https://en.wikipedia.org/wiki/SRGB) color space: {{CSSXref("color_value/hsl", "hsl()")}}, {{CSSXref("color_value/hwb", "hwb()")}}, and {{CSSXref("color_value/rgb", "rgb()")}}.
  - [CIELAB](https://en.wikipedia.org/wiki/CIELAB_color_space) color space: {{CSSXref("color_value/lab", "lab()")}} and {{CSSXref("color_value/lch", "lch()")}}.
  - [Oklab](https://bottosson.github.io/posts/oklab/) color space: {{CSSXref("color_value/oklab", "oklab()")}} and {{CSSXref("color_value/oklch", "oklch()")}}.
  - Other color spaces: {{CSSXref("color_value/color", "color()")}}.
- By using [relative color](/en-US/docs/Web/CSS/CSS_colors/Relative_colors) syntax to output a new color based on an existing color. Any of the above color functions can take an **origin color** preceded by the \`from\` keyword and followed by definitions of the channel values for the new **output color**.
- By mixing two colors: {{CSSXref("color_value/color-mix", "color-mix()")}}.
- By specifying two colors, using the first for light color-schemes and the second for dark color-schemes: {{CSSXref("color_value/light-dark", "light-dark()")}}.

### \`currentcolor\` keyword

The \`currentcolor\` keyword represents the value of an element's {{Cssxref("color")}} property. This lets you use the \`color\` value on properties that do not receive it by default.

If \`currentcolor\` is used as the value of the \`color\` property, it instead takes its value from the inherited value of the \`color\` property.

\`\`\`html
<div style="color: blue; border: 1px dashed currentcolor;">
  The color of this text is blue.
  <div style="background: currentcolor; height:9px;"></div>
  This block is surrounded by a blue border.
</div>
\`\`\`

{{EmbedLiveSample("currentcolor_keyword", "100%", 80)}}

### Missing color components

Each component of any CSS color functions - except for those using the legacy comma-separated syntax - can be specified as the keyword \`none\` to be a missing component.

Explicitly specifying [missing components in color interpolation](#interpolation_with_missing_components) is useful for cases where you would like to {{glossary("interpolation", "interpolate")}} some color components but not others. For all other purposes, a missing component will effectively have a zero value in an appropriate unit: \`0\`, \`0%\`, or \`0deg\`. For example, the following colors are equivalent when used outside of interpolation:

\`\`\`css
/* These are equivalent */
color: oklab(50% none -0.25);
color: oklab(50% 0 -0.25);

/* These are equivalent */
background-color: hsl(none 100% 50%);
background-color: hsl(0deg 100% 50%);
\`\`\`
"
`;

exports[`sections getSection properly returns the section with the provided name and position 1`] = `
"## Description

The \`map()\` method is an [iterative method](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods). It calls a provided \`callbackFn\` function once for each element in an array and constructs a new array from the results. Read the [iterative methods](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods) section for more information about how these methods work in general.

\`callbackFn\` is invoked only for array indexes which have assigned values. It is not invoked for empty slots in [sparse arrays](/en-US/docs/Web/JavaScript/Guide/Indexed_collections#sparse_arrays).

The \`map()\` method is [generic](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#generic_array_methods). It only expects the \`this\` value to have a \`length\` property and integer-keyed properties.

Since \`map\` builds a new array, calling it without using the returned array is an anti-pattern; use {{jsxref("Array/forEach", "forEach")}} or {{jsxref("Statements/for...of", "for...of")}} instead.
"
`;

exports[`sections getSection properly returns the section with the provided name and position 2`] = `
"## Accessibility concerns

Use of the \`title\` attribute is highly problematic for:

- People using touch-only devices
- People navigating with keyboards
- People navigating with assistive technology such as screen readers or magnifiers
- People experiencing fine motor control impairment
- People with cognitive concerns

This is due to inconsistent browser support, compounded by the additional assistive technology parsing of the browser-rendered page. If a tooltip effect is desired, it is better to [use a more accessible technique](https://inclusive-components.design/tooltips-toggletips/) that can be accessed with the above browsing methods.

- [3.2.5.1. The title attribute | W3C HTML 5.2: 3. Semantics, structure, and APIs of HTML documents](https://html.spec.whatwg.org/multipage/dom.html#the-title-attribute)
- [Using the HTML title attribute â€“ updated | The Paciello Group](https://www.tpgi.com/using-the-html-title-attribute-updated/)
- [Tooltips & Toggletips - Inclusive Components](https://inclusive-components.design/tooltips-toggletips/)
- [The Trials and Tribulations of the Title Attribute - 24 Accessibility](https://www.24a11y.com/2017/the-trials-and-tribulations-of-the-title-attribute/)
"
`;

exports[`sections getSection properly returns the section with the provided name and position 3`] = `
"#### CSS

The \`color-mix()\` function is used to add increasing percentages of \`red\`, which is declared using a [custom property](/en-US/docs/Web/CSS/--*) named \`--base\`, defined on the {{cssxref(":root")}}. The 6th {{htmlelement("li")}} doesn't include a percentage, creating an output color that is half as opaque as the \`--base\` color. We include a striped background on the {{htmlelement("ul")}} to make the transparency visible.

\`\`\`css hidden
ul {
display: flex;
list-style-type: none;
font-size: 150%;
gap: 10px;
border: 2px solid;
padding: 10px;
}

li {
padding: 10px;
flex: 1;
box-sizing: border-box;
font-family: monospace;
outline: 1px solid var(--base);
text-align: center;
}
\`\`\`

\`\`\`css
:root {
--base: red;
}

ul {
background: repeating-linear-gradient(
45deg,
palegoldenrod 0px 2px,
white 2px 4px
);
}

li:nth-child(1) {
background-color: color-mix(in srgb, var(--base) 0%, transparent);
}

li:nth-child(2) {
background-color: color-mix(in srgb, var(--base) 25%, transparent);
}

li:nth-child(3) {
background-color: color-mix(in srgb, var(--base) 50%, transparent);
}

li:nth-child(4) {
background-color: color-mix(in srgb, var(--base) 75%, transparent);
}

li:nth-child(5) {
background-color: color-mix(in srgb, var(--base) 100%, transparent);
}

li:nth-child(6) {
background-color: color-mix(in srgb, var(--base), transparent);
}
\`\`\`
"
`;

exports[`sections getSection properly returns the section with the provided name and position 4`] = `
"#### CSS

\`\`\`css hidden
body {
display: flex;
flex-wrap: wrap;
}
div {
height: 80px;
margin: 10px;
width: 80px;
}
\`\`\`

\`\`\`css
div:nth-child(1) {
background-color: hsl(0 0% 50%);
}
div:nth-child(2) {
background-color: hsl(0 20% 50%);
}
div:nth-child(3) {
background-color: hsl(0 40% 50%);
}
div:nth-child(4) {
background-color: hsl(0 60% 50%);
}
div:nth-child(5) {
background-color: hsl(0 80% 50%);
}
div:nth-child(6) {
background-color: hsl(0 100% 50%);
}
\`\`\`
"
`;

exports[`sections removeEmptySections removes empty sections from a given document 1`] = `
"---
title: Array.prototype.map()
slug: Web/JavaScript/Reference/Global_Objects/Array/map
page-type: javascript-instance-method
browser-compat: javascript.builtins.Array.map
---


The **\`map()\`** method of \`Array\` instances creates
a new array populated with the results of calling a provided function on
every element in the calling array.


## Syntax

\`\`\`js-nolint
map(callbackFn)
map(callbackFn, thisArg)
\`\`\`

### Parameters

- \`callbackFn\`
  - : A function to execute for each element in the array. Its return value is added as a single element in the new array. The function is called with the following arguments:
    - \`element\`
      - : The current element being processed in the array.
    - \`index\`
      - : The index of the current element being processed in the array.
    - \`array\`
      - : The array \`map()\` was called upon.
- \`thisArg\` 
  - : A value to use as \`this\` when executing \`callbackFn\`. See [iterative methods](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods).

### Return value

A new array with each element being the result of the callback function.

## Description

The \`map()\` method is an [iterative method](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods). It calls a provided \`callbackFn\` function once for each element in an array and constructs a new array from the results. Read the [iterative methods](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods) section for more information about how these methods work in general.

\`callbackFn\` is invoked only for array indexes which have assigned values. It is not invoked for empty slots in [sparse arrays](/en-US/docs/Web/JavaScript/Guide/Indexed_collections#sparse_arrays).

The \`map()\` method is [generic](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#generic_array_methods). It only expects the \`this\` value to have a \`length\` property and integer-keyed properties.

Since \`map\` builds a new array, calling it without using the returned array is an anti-pattern; use \`forEach\` or \`for...of\` instead.

## Examples

### Mapping an array of numbers to an array of square roots

The following code takes an array of numbers and creates a new array containing the square roots of the numbers in the first array.

\`\`\`js
const numbers = [1, 4, 9];
const roots = numbers.map((num) => Math.sqrt(num));

// roots is now     [1, 2, 3]
// numbers is still [1, 4, 9]
\`\`\`

### Using map to reformat objects in an array

The following code takes an array of objects and creates a new array containing the newly reformatted objects.

\`\`\`js
const kvArray = [
  { key: 1, value: 10 },
  { key: 2, value: 20 },
  { key: 3, value: 30 },
];

const reformattedArray = kvArray.map(({ key, value }) => ({ [key]: value }));

console.log(reformattedArray); // [{ 1: 10 }, { 2: 20 }, { 3: 30 }]
console.log(kvArray);
// [
//   { key: 1, value: 10 },
//   { key: 2, value: 20 },
//   { key: 3, value: 30 }
// ]
\`\`\`

### Using parseInt() with map()

It is common to use the callback with one argument (the element being traversed). Certain functions are also commonly used with one argument, even though they take additional optional arguments. These habits may lead to confusing behaviors. Consider:

\`\`\`js
["1", "2", "3"].map(parseInt);
\`\`\`

While one might expect \`[1, 2, 3]\`, the actual result is \`[1, NaN, NaN]\`.

\`parseInt\` is often used with one argument, but takes two. The first is an expression and the second is the radix to the callback function, \`Array.prototype.map\` passes 3 arguments: the element, the index, and the array. The third argument is ignored by \`parseInt\` â€” but _not_ the second one! This is the source of possible confusion.

Here is a concise example of the iteration steps:

\`\`\`js
/* first iteration  (index is 0): */ parseInt("1", 0); // 1
/* second iteration (index is 1): */ parseInt("2", 1); // NaN
/* third iteration  (index is 2): */ parseInt("3", 2); // NaN
\`\`\`

To solve this, define another function that only takes one argument:

\`\`\`js
["1", "2", "3"].map((str) => parseInt(str, 10)); // [1, 2, 3]
\`\`\`

You can also use the \`Number\` function, which only takes one argument:

\`\`\`js
["1", "2", "3"].map(Number); // [1, 2, 3]

// But unlike parseInt(), Number() will also return a float or (resolved) exponential notation:
["1.1", "2.2e2", "3e300"].map(Number); // [1.1, 220, 3e+300]

// For comparison, if we use parseInt() on the array above:
["1.1", "2.2e2", "3e300"].map((str) => parseInt(str, 10)); // [1, 2, 3]
\`\`\`

See [A JavaScript optional argument hazard](https://wirfs-brock.com/allen/posts/166) by Allen Wirfs-Brock for more discussions.

### Mapped array contains undefined

When \`undefined\` or nothing is returned, the resulting array contains \`undefined\`. If you want to delete the element instead, chain a \`filter()\` method, or use the \`flatMap()\` method and return an empty array to signify deletion.

\`\`\`js
const numbers = [1, 2, 3, 4];
const filteredNumbers = numbers.map((num, index) => {
  if (index < 3) {
    return num;
  }
});

// index goes from 0, so the filterNumbers are 1,2,3 and undefined.
// filteredNumbers is [1, 2, 3, undefined]
// numbers is still [1, 2, 3, 4]
\`\`\`

### Side-effectful mapping

The callback can have side effects.

\`\`\`js
const cart = [5, 15, 25];
let total = 0;
const withTax = cart.map((cost) => {
  total += cost;
  return cost * 1.2;
});
console.log(withTax); // [6, 18, 30]
console.log(total); // 45
\`\`\`

This is not recommended, because copying methods are best used with pure functions. In this case, we can choose to iterate the array twice.

\`\`\`js
const cart = [5, 15, 25];
const total = cart.reduce((acc, cost) => acc + cost, 0);
const withTax = cart.map((cost) => cost * 1.2);
\`\`\`

Sometimes this pattern goes to its extreme and the _only_ useful thing that \`map()\` does is causing side effects.

\`\`\`js
const products = [
  { name: "sports car" },
  { name: "laptop" },
  { name: "phone" },
];

products.map((product) => {
  product.price = 100;
});
\`\`\`

As mentioned previously, this is an anti-pattern. If you don't use the return value of \`map()\`, use \`forEach()\` or a \`for...of\` loop instead.

\`\`\`js
products.forEach((product) => {
  product.price = 100;
});
\`\`\`

Or, if you want to create a new array instead:

\`\`\`js
const productsWithPrice = products.map((product) => {
  return { ...product, price: 100 };
});
\`\`\`

### Using the third argument of callbackFn

The \`array\` argument is useful if you want to access another element in the array, especially when you don't have an existing variable that refers to the array. The following example first uses \`filter()\` to extract the positive values and then uses \`map()\` to create a new array where each element is the average of its neighbors and itself.

\`\`\`js
const numbers = [3, -1, 1, 4, 1, 5, 9, 2, 6];
const averaged = numbers
  .filter((num) => num > 0)
  .map((num, idx, arr) => {
    // Without the arr argument, there's no way to easily access the
    // intermediate array without saving it to a variable.
    const prev = arr[idx - 1];
    const next = arr[idx + 1];
    let count = 1;
    let total = num;
    if (prev !== undefined) {
      count++;
      total += prev;
    }
    if (next !== undefined) {
      count++;
      total += next;
    }
    const average = total / count;
    // Keep two decimal places
    return Math.round(average * 100) / 100;
  });
console.log(averaged); // [2, 2.67, 2, 3.33, 5, 5.33, 5.67, 4]
\`\`\`

The \`array\` argument is _not_ the array that is being built â€” there is no way to access the array being built from the callback function.

### Using map() on sparse arrays

A sparse array remains sparse after \`map()\`. The indices of empty slots are still empty in the returned array, and the callback function won't be called on them.

\`\`\`js
console.log(
  [1, , 3].map((x, index) => {
    console.log(\`Visit \${index}\`);
    return x * 2;
  }),
);
// Visit 0
// Visit 2
// [2, empty, 6]
\`\`\`

### Calling map() on non-array objects

The \`map()\` method reads the \`length\` property of \`this\` and then accesses each property whose key is a nonnegative integer less than \`length\`.

\`\`\`js
const arrayLike = {
  length: 3,
  0: 2,
  1: 3,
  2: 4,
  3: 5, // ignored by map() since length is 3
};
console.log(Array.prototype.map.call(arrayLike, (x) => x ** 2));
// [ 4, 9, 16 ]
\`\`\`

This example shows how to iterate through a collection of objects collected by \`querySelectorAll\`. This is because \`querySelectorAll\` returns a \`NodeList\` (which is a collection of objects). In this case, we return all the selected \`option\`s' values on the screen:

\`\`\`js
const elems = document.querySelectorAll("select option:checked");
const values = Array.prototype.map.call(elems, ({ value }) => value);
\`\`\`

You can also use \`Array.from()\` to transform \`elems\` to an array, and then access the \`map()\` method.



## See also

- [Polyfill of \`Array.prototype.map\` in \`core-js\`](https://github.com/zloirock/core-js#ecmascript-array)
- [Indexed collections](/en-US/docs/Web/JavaScript/Guide/Indexed_collections) guide
- \`Array\`
- \`Array.prototype.forEach()\`
- \`Array.from()\`
- \`TypedArray.prototype.map()\`
- \`Map\`
"
`;

exports[`sections removeSection returns a document with the specified section removed 1`] = `
"---
title: Array.prototype.map()
slug: Web/JavaScript/Reference/Global_Objects/Array/map
page-type: javascript-instance-method
browser-compat: javascript.builtins.Array.map
---

{{JSRef}}

The **\`map()\`** method of {{jsxref("Array")}} instances creates
a new array populated with the results of calling a provided function on
every element in the calling array.

{{EmbedInteractiveExample("pages/js/array-map.html")}}

## Syntax

\`\`\`js-nolint
map(callbackFn)
map(callbackFn, thisArg)
\`\`\`

### Parameters

- \`callbackFn\`
  - : A function to execute for each element in the array. Its return value is added as a single element in the new array. The function is called with the following arguments:
    - \`element\`
      - : The current element being processed in the array.
    - \`index\`
      - : The index of the current element being processed in the array.
    - \`array\`
      - : The array \`map()\` was called upon.
- \`thisArg\` {{optional_inline}}
  - : A value to use as \`this\` when executing \`callbackFn\`. See [iterative methods](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods).

### Return value

A new array with each element being the result of the callback function.


### Mapping an array of numbers to an array of square roots

The following code takes an array of numbers and creates a new array containing the square roots of the numbers in the first array.

\`\`\`js
const numbers = [1, 4, 9];
const roots = numbers.map((num) => Math.sqrt(num));

// roots is now     [1, 2, 3]
// numbers is still [1, 4, 9]
\`\`\`

### Using map to reformat objects in an array

The following code takes an array of objects and creates a new array containing the newly reformatted objects.

\`\`\`js
const kvArray = [
  { key: 1, value: 10 },
  { key: 2, value: 20 },
  { key: 3, value: 30 },
];

const reformattedArray = kvArray.map(({ key, value }) => ({ [key]: value }));

console.log(reformattedArray); // [{ 1: 10 }, { 2: 20 }, { 3: 30 }]
console.log(kvArray);
// [
//   { key: 1, value: 10 },
//   { key: 2, value: 20 },
//   { key: 3, value: 30 }
// ]
\`\`\`

### Using parseInt() with map()

It is common to use the callback with one argument (the element being traversed). Certain functions are also commonly used with one argument, even though they take additional optional arguments. These habits may lead to confusing behaviors. Consider:

\`\`\`js
["1", "2", "3"].map(parseInt);
\`\`\`

While one might expect \`[1, 2, 3]\`, the actual result is \`[1, NaN, NaN]\`.

{{jsxref("parseInt")}} is often used with one argument, but takes two. The first is an expression and the second is the radix to the callback function, \`Array.prototype.map\` passes 3 arguments: the element, the index, and the array. The third argument is ignored by {{jsxref("parseInt")}} â€” but _not_ the second one! This is the source of possible confusion.

Here is a concise example of the iteration steps:

\`\`\`js
/* first iteration  (index is 0): */ parseInt("1", 0); // 1
/* second iteration (index is 1): */ parseInt("2", 1); // NaN
/* third iteration  (index is 2): */ parseInt("3", 2); // NaN
\`\`\`

To solve this, define another function that only takes one argument:

\`\`\`js
["1", "2", "3"].map((str) => parseInt(str, 10)); // [1, 2, 3]
\`\`\`

You can also use the {{jsxref("Number")}} function, which only takes one argument:

\`\`\`js
["1", "2", "3"].map(Number); // [1, 2, 3]

// But unlike parseInt(), Number() will also return a float or (resolved) exponential notation:
["1.1", "2.2e2", "3e300"].map(Number); // [1.1, 220, 3e+300]

// For comparison, if we use parseInt() on the array above:
["1.1", "2.2e2", "3e300"].map((str) => parseInt(str, 10)); // [1, 2, 3]
\`\`\`

See [A JavaScript optional argument hazard](https://wirfs-brock.com/allen/posts/166) by Allen Wirfs-Brock for more discussions.

### Mapped array contains undefined

When {{jsxref("undefined")}} or nothing is returned, the resulting array contains \`undefined\`. If you want to delete the element instead, chain a {{jsxref("Array/filter", "filter()")}} method, or use the {{jsxref("Array/flatMap", "flatMap()")}} method and return an empty array to signify deletion.

\`\`\`js
const numbers = [1, 2, 3, 4];
const filteredNumbers = numbers.map((num, index) => {
  if (index < 3) {
    return num;
  }
});

// index goes from 0, so the filterNumbers are 1,2,3 and undefined.
// filteredNumbers is [1, 2, 3, undefined]
// numbers is still [1, 2, 3, 4]
\`\`\`

### Side-effectful mapping

The callback can have side effects.

\`\`\`js
const cart = [5, 15, 25];
let total = 0;
const withTax = cart.map((cost) => {
  total += cost;
  return cost * 1.2;
});
console.log(withTax); // [6, 18, 30]
console.log(total); // 45
\`\`\`

This is not recommended, because copying methods are best used with pure functions. In this case, we can choose to iterate the array twice.

\`\`\`js
const cart = [5, 15, 25];
const total = cart.reduce((acc, cost) => acc + cost, 0);
const withTax = cart.map((cost) => cost * 1.2);
\`\`\`

Sometimes this pattern goes to its extreme and the _only_ useful thing that \`map()\` does is causing side effects.

\`\`\`js
const products = [
  { name: "sports car" },
  { name: "laptop" },
  { name: "phone" },
];

products.map((product) => {
  product.price = 100;
});
\`\`\`

As mentioned previously, this is an anti-pattern. If you don't use the return value of \`map()\`, use \`forEach()\` or a \`for...of\` loop instead.

\`\`\`js
products.forEach((product) => {
  product.price = 100;
});
\`\`\`

Or, if you want to create a new array instead:

\`\`\`js
const productsWithPrice = products.map((product) => {
  return { ...product, price: 100 };
});
\`\`\`

### Using the third argument of callbackFn

The \`array\` argument is useful if you want to access another element in the array, especially when you don't have an existing variable that refers to the array. The following example first uses \`filter()\` to extract the positive values and then uses \`map()\` to create a new array where each element is the average of its neighbors and itself.

\`\`\`js
const numbers = [3, -1, 1, 4, 1, 5, 9, 2, 6];
const averaged = numbers
  .filter((num) => num > 0)
  .map((num, idx, arr) => {
    // Without the arr argument, there's no way to easily access the
    // intermediate array without saving it to a variable.
    const prev = arr[idx - 1];
    const next = arr[idx + 1];
    let count = 1;
    let total = num;
    if (prev !== undefined) {
      count++;
      total += prev;
    }
    if (next !== undefined) {
      count++;
      total += next;
    }
    const average = total / count;
    // Keep two decimal places
    return Math.round(average * 100) / 100;
  });
console.log(averaged); // [2, 2.67, 2, 3.33, 5, 5.33, 5.67, 4]
\`\`\`

The \`array\` argument is _not_ the array that is being built â€” there is no way to access the array being built from the callback function.

### Using map() on sparse arrays

A sparse array remains sparse after \`map()\`. The indices of empty slots are still empty in the returned array, and the callback function won't be called on them.

\`\`\`js
console.log(
  [1, , 3].map((x, index) => {
    console.log(\`Visit \${index}\`);
    return x * 2;
  }),
);
// Visit 0
// Visit 2
// [2, empty, 6]
\`\`\`

### Calling map() on non-array objects

The \`map()\` method reads the \`length\` property of \`this\` and then accesses each property whose key is a nonnegative integer less than \`length\`.

\`\`\`js
const arrayLike = {
  length: 3,
  0: 2,
  1: 3,
  2: 4,
  3: 5, // ignored by map() since length is 3
};
console.log(Array.prototype.map.call(arrayLike, (x) => x ** 2));
// [ 4, 9, 16 ]
\`\`\`

This example shows how to iterate through a collection of objects collected by \`querySelectorAll\`. This is because \`querySelectorAll\` returns a \`NodeList\` (which is a collection of objects). In this case, we return all the selected \`option\`s' values on the screen:

\`\`\`js
const elems = document.querySelectorAll("select option:checked");
const values = Array.prototype.map.call(elems, ({ value }) => value);
\`\`\`

You can also use {{jsxref("Array.from()")}} to transform \`elems\` to an array, and then access the \`map()\` method.

## Specifications

{{Specifications}}

## Browser compatibility

{{Compat}}

## See also

- [Polyfill of \`Array.prototype.map\` in \`core-js\`](https://github.com/zloirock/core-js#ecmascript-array)
- [Indexed collections](/en-US/docs/Web/JavaScript/Guide/Indexed_collections) guide
- {{jsxref("Array")}}
- {{jsxref("Array.prototype.forEach()")}}
- {{jsxref("Array.from()")}}
- {{jsxref("TypedArray.prototype.map()")}}
- {{jsxref("Map")}}
"
`;
