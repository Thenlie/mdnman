// Jest Snapshot v1, https://jestjs.io/docs/snapshot-testing

exports[`getMDNFile appends \`index.md\` when provided a directory 1`] = `
"---
title: Array.prototype.map()
short-title: map()
slug: Web/JavaScript/Reference/Global_Objects/Array/map
page-type: javascript-instance-method
browser-compat: javascript.builtins.Array.map
sidebar: jsref
---

The **\`map()\`** method of {{jsxref("Array")}} instances creates
a new array populated with the results of calling a provided function on
every element in the calling array.

{{InteractiveExample("JavaScript Demo: Array.prototype.map()")}}

\`\`\`js interactive-example
const array = [1, 4, 9, 16];

// Pass a function to map
const mapped = array.map((x) => x * 2);

console.log(mapped);
// Expected output: Array [2, 8, 18, 32]
\`\`\`

## Syntax

\`\`\`js-nolint
map(callbackFn)
map(callbackFn, thisArg)
\`\`\`

### Parameters

- \`callbackFn\`
  - : A function to execute for each element in the array. Its return value is added as a single element in the new array. The function is called with the following arguments:
    - \`element\`
      - : The current element being processed in the array.
    - \`index\`
      - : The index of the current element being processed in the array.
    - \`array\`
      - : The array \`map()\` was called upon.
- \`thisArg\` {{optional_inline}}
  - : A value to use as \`this\` when executing \`callbackFn\`. See [iterative methods](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods).

### Return value

A new array with each element being the result of the callback function.

## Description

The \`map()\` method is an [iterative method](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods). It calls a provided \`callbackFn\` function once for each element in an array and constructs a new array from the results. Read the [iterative methods](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods) section for more information about how these methods work in general.

\`callbackFn\` is invoked only for array indexes which have assigned values. It is not invoked for empty slots in [sparse arrays](/en-US/docs/Web/JavaScript/Guide/Indexed_collections#sparse_arrays).

The \`map()\` method is [generic](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#generic_array_methods). It only expects the \`this\` value to have a \`length\` property and integer-keyed properties.

Since \`map\` builds a new array, calling it without using the returned array is an anti-pattern; use {{jsxref("Array/forEach", "forEach")}} or {{jsxref("Statements/for...of", "for...of")}} instead.

## Examples

### Mapping an array of numbers to an array of square roots

The following code takes an array of numbers and creates a new array containing the square roots of the numbers in the first array.

\`\`\`js
const numbers = [1, 4, 9];
const roots = numbers.map((num) => Math.sqrt(num));

// roots is now     [1, 2, 3]
// numbers is still [1, 4, 9]
\`\`\`

### Using map to reformat objects in an array

The following code takes an array of objects and creates a new array containing the newly reformatted objects.

\`\`\`js
const kvArray = [
  { key: 1, value: 10 },
  { key: 2, value: 20 },
  { key: 3, value: 30 },
];

const reformattedArray = kvArray.map(({ key, value }) => ({ [key]: value }));

console.log(reformattedArray); // [{ 1: 10 }, { 2: 20 }, { 3: 30 }]
console.log(kvArray);
// [
//   { key: 1, value: 10 },
//   { key: 2, value: 20 },
//   { key: 3, value: 30 }
// ]
\`\`\`

### Using parseInt() with map()

It is common to use the callback with one argument (the element being traversed). Certain functions are also commonly used with one argument, even though they take additional optional arguments. These habits may lead to confusing behaviors. Consider:

\`\`\`js
["1", "2", "3"].map(parseInt);
\`\`\`

While one might expect \`[1, 2, 3]\`, the actual result is \`[1, NaN, NaN]\`.

{{jsxref("parseInt")}} is often used with one argument, but takes two. The first is an expression and the second is the radix to the callback function, \`Array.prototype.map\` passes 3 arguments: the element, the index, and the array. The third argument is ignored by {{jsxref("parseInt")}} — but _not_ the second one! This is the source of possible confusion.

Here is a concise example of the iteration steps:

\`\`\`js
/* first iteration  (index is 0): */ parseInt("1", 0); // 1
/* second iteration (index is 1): */ parseInt("2", 1); // NaN
/* third iteration  (index is 2): */ parseInt("3", 2); // NaN
\`\`\`

To solve this, define another function that only takes one argument:

\`\`\`js
["1", "2", "3"].map((str) => parseInt(str, 10)); // [1, 2, 3]
\`\`\`

You can also use the {{jsxref("Number")}} function, which only takes one argument:

\`\`\`js
["1", "2", "3"].map(Number); // [1, 2, 3]

// But unlike parseInt(), Number() will also return a float or (resolved) exponential notation:
["1.1", "2.2e2", "3e300"].map(Number); // [1.1, 220, 3e+300]

// For comparison, if we use parseInt() on the array above:
["1.1", "2.2e2", "3e300"].map((str) => parseInt(str, 10)); // [1, 2, 3]
\`\`\`

See [A JavaScript optional argument hazard](https://wirfs-brock.com/allen/posts/166) by Allen Wirfs-Brock for more discussions.

### Mapped array contains undefined

When {{jsxref("undefined")}} or nothing is returned, the resulting array contains \`undefined\`. If you want to delete the element instead, chain a {{jsxref("Array/filter", "filter()")}} method, or use the {{jsxref("Array/flatMap", "flatMap()")}} method and return an empty array to signify deletion.

\`\`\`js
const numbers = [1, 2, 3, 4];
const filteredNumbers = numbers.map((num, index) => {
  if (index < 3) {
    return num;
  }
});

// index goes from 0, so the filterNumbers are 1,2,3 and undefined.
// filteredNumbers is [1, 2, 3, undefined]
// numbers is still [1, 2, 3, 4]
\`\`\`

### Side-effectful mapping

The callback can have side effects.

\`\`\`js
const cart = [5, 15, 25];
let total = 0;
const withTax = cart.map((cost) => {
  total += cost;
  return cost * 1.2;
});
console.log(withTax); // [6, 18, 30]
console.log(total); // 45
\`\`\`

This is not recommended, because copying methods are best used with pure functions. In this case, we can choose to iterate the array twice.

\`\`\`js
const cart = [5, 15, 25];
const total = cart.reduce((acc, cost) => acc + cost, 0);
const withTax = cart.map((cost) => cost * 1.2);
\`\`\`

Sometimes this pattern goes to its extreme and the _only_ useful thing that \`map()\` does is causing side effects.

\`\`\`js
const products = [
  { name: "sports car" },
  { name: "laptop" },
  { name: "phone" },
];

products.map((product) => {
  product.price = 100;
});
\`\`\`

As mentioned previously, this is an anti-pattern. If you don't use the return value of \`map()\`, use \`forEach()\` or a \`for...of\` loop instead.

\`\`\`js
products.forEach((product) => {
  product.price = 100;
});
\`\`\`

Or, if you want to create a new array instead:

\`\`\`js
const productsWithPrice = products.map((product) => ({
  ...product,
  price: 100,
}));
\`\`\`

### Using the third argument of callbackFn

The \`array\` argument is useful if you want to access another element in the array, especially when you don't have an existing variable that refers to the array. The following example first uses \`filter()\` to extract the positive values and then uses \`map()\` to create a new array where each element is the average of its neighbors and itself.

\`\`\`js
const numbers = [3, -1, 1, 4, 1, 5, 9, 2, 6];
const averaged = numbers
  .filter((num) => num > 0)
  .map((num, idx, arr) => {
    // Without the arr argument, there's no way to easily access the
    // intermediate array without saving it to a variable.
    const prev = arr[idx - 1];
    const next = arr[idx + 1];
    let count = 1;
    let total = num;
    if (prev !== undefined) {
      count++;
      total += prev;
    }
    if (next !== undefined) {
      count++;
      total += next;
    }
    const average = total / count;
    // Keep two decimal places
    return Math.round(average * 100) / 100;
  });
console.log(averaged); // [2, 2.67, 2, 3.33, 5, 5.33, 5.67, 4]
\`\`\`

The \`array\` argument is _not_ the array that is being built — there is no way to access the array being built from the callback function.

### Using map() on sparse arrays

A sparse array remains sparse after \`map()\`. The indices of empty slots are still empty in the returned array, and the callback function won't be called on them.

\`\`\`js
console.log(
  [1, , 3].map((x, index) => {
    console.log(\`Visit \${index}\`);
    return x * 2;
  }),
);
// Visit 0
// Visit 2
// [2, empty, 6]
\`\`\`

### Calling map() on non-array objects

The \`map()\` method reads the \`length\` property of \`this\` and then accesses each property whose key is a nonnegative integer less than \`length\`.

\`\`\`js
const arrayLike = {
  length: 3,
  0: 2,
  1: 3,
  2: 4,
  3: 5, // ignored by map() since length is 3
};
console.log(Array.prototype.map.call(arrayLike, (x) => x ** 2));
// [ 4, 9, 16 ]
\`\`\`

This example shows how to iterate through a collection of objects collected by \`querySelectorAll\`. This is because \`querySelectorAll\` returns a \`NodeList\` (which is a collection of objects). In this case, we return all the selected \`option\`s' values on the screen:

\`\`\`js
const elems = document.querySelectorAll("select option:checked");
const values = Array.prototype.map.call(elems, ({ value }) => value);
\`\`\`

You can also use {{jsxref("Array.from()")}} to transform \`elems\` to an array, and then access the \`map()\` method.

## Specifications

{{Specifications}}

## Browser compatibility

{{Compat}}

## See also

- [Polyfill of \`Array.prototype.map\` in \`core-js\`](https://github.com/zloirock/core-js#ecmascript-array)
- [es-shims polyfill of \`Array.prototype.map\`](https://www.npmjs.com/package/array.prototype.map)
- [Indexed collections](/en-US/docs/Web/JavaScript/Guide/Indexed_collections) guide
- {{jsxref("Array")}}
- {{jsxref("Array.prototype.forEach()")}}
- {{jsxref("Array.from()")}}
- {{jsxref("TypedArray.prototype.map()")}}
- {{jsxref("Map")}}
"
`;

exports[`getMDNFile appends \`index.md\` when provided a directory 2`] = `
"---
title: "<a>: The Anchor element"
slug: Web/HTML/Reference/Elements/a
page-type: html-element
browser-compat: html.elements.a
sidebar: htmlsidebar
---

The **\`<a>\`** [HTML](/en-US/docs/Web/HTML) element (or _anchor_ element), with [its \`href\` attribute](#href), creates a hyperlink to web pages, files, email addresses, locations in the same page, or anything else a URL can address.

Content within each \`<a>\` _should_ indicate the link's destination. If the \`href\` attribute is present, pressing the enter key while focused on the \`<a>\` element will activate it.

{{InteractiveExample("HTML Demo: &lt;a&gt;", "tabbed-shorter")}}

\`\`\`html interactive-example
<p>You can reach Michael at:</p>

<ul>
  <li><a href="https://example.com">Website</a></li>
  <li><a href="mailto:m.bluth@example.com">Email</a></li>
  <li><a href="tel:+123456789">Phone</a></li>
</ul>
\`\`\`

\`\`\`css interactive-example
li {
  margin-bottom: 0.5rem;
}
\`\`\`

## Attributes

This element's attributes include the [global attributes](/en-US/docs/Web/HTML/Reference/Global_attributes).

- \`attributionsrc\` {{experimental_inline}}
  - : Specifies that you want the browser to send an {{httpheader("Attribution-Reporting-Eligible")}} header. On the server-side this is used to trigger sending an {{httpheader("Attribution-Reporting-Register-Source")}} header in the response, to register a [navigation-based attribution source](/en-US/docs/Web/API/Attribution_Reporting_API/Registering_sources#navigation-based_attribution_sources).

    The browser stores the source data associated with the navigation-based attribution source (as provided in the {{httpheader("Attribution-Reporting-Register-Source")}} response header) when the user clicks the link. See the [Attribution Reporting API](/en-US/docs/Web/API/Attribution_Reporting_API) for more details.

    There are two versions of this attribute that you can set:
    - Boolean, i.e., just the \`attributionsrc\` name. This specifies that you want the {{httpheader("Attribution-Reporting-Eligible")}} header sent to the same server as the \`href\` attribute points to. This is fine when you are handling the attribution source registration on the same server.
    - Value containing one or more URLs, for example:

      \`\`\`html
      attributionsrc="https://a.example/register-source
      https://b.example/register-source"
      \`\`\`

      This is useful in cases where the requested resource is not on a server you control, or you just want to handle registering the attribution source on a different server. In this case, you can specify one or more URLs as the value of \`attributionsrc\`. When the resource request occurs, the {{httpheader("Attribution-Reporting-Eligible")}} header will be sent to the URL(s) specified in \`attributionsrc\` in addition to the resource origin. These URLs can then respond with the {{httpheader("Attribution-Reporting-Register-Source")}} to complete registration.

      > [!NOTE]
      > Specifying multiple URLs means that multiple attribution sources can be registered on the same feature. You might for example have different campaigns that you are trying to measure the success of, which involve generating different reports on different data.

    \`<a>\` elements cannot be used as attribution triggers, only sources.

- \`download\`
  - : Causes the browser to treat the linked URL as a download. Can be used with or without a \`filename\` value:
    - Without a value, the browser will suggest a filename/extension, generated from various sources:
      - The {{HTTPHeader("Content-Disposition")}} HTTP header
      - The final segment in the URL [path](/en-US/docs/Web/API/URL/pathname)
      - The {{Glossary("MIME_type", "media type")}} (from the {{HTTPHeader("Content-Type")}} header, the start of a [\`data:\` URL](/en-US/docs/Web/URI/Reference/Schemes/data), or {{domxref("Blob.type")}} for a [\`blob:\` URL](/en-US/docs/Web/URI/Reference/Schemes/blob))

    - \`filename\`: defining a value suggests it as the filename. \`/\` and \`\\\` characters are converted to underscores (\`_\`). Filesystems may forbid other characters in filenames, so browsers will adjust the suggested name if necessary.

    > [!NOTE]
    >
    > - \`download\` only works for [same-origin URLs](/en-US/docs/Web/Security/Same-origin_policy), or the \`blob:\` and \`data:\` schemes.
    > - How browsers treat downloads varies by browser, user settings, and other factors. The user may be prompted before a download starts, or the file may be saved automatically, or it may open automatically, either in an external application or in the browser itself.
    > - If the \`Content-Disposition\` header has different information from the \`download\` attribute, resulting behavior may differ:
    >   - If the header specifies a \`filename\`, it takes priority over a filename specified in the \`download\` attribute.
    >   - If the header specifies a disposition of \`inline\`, Chrome and Firefox prioritize the attribute and treat it as a download. Old Firefox versions (before 82) prioritize the header and will display the content inline.

- \`href\`
  - : The URL that the hyperlink points to. Links are not restricted to HTTP-based URLs — they can use any URL scheme supported by browsers:
    - Telephone numbers with \`tel:\` URLs
    - Email addresses with \`mailto:\` URLs
    - SMS text messages with \`sms:\` URLs
    - Executable code with [\`javascript:\` URLs](/en-US/docs/Web/URI/Reference/Schemes/javascript)
    - While web browsers may not support other URL schemes, websites can with [\`registerProtocolHandler()\`](/en-US/docs/Web/API/Navigator/registerProtocolHandler)

    Moreover other URL features can locate specific parts of the resource, including:
    - Sections of a page with document fragments
    - Specific text portions with [text fragments](/en-US/docs/Web/URI/Reference/Fragment/Text_fragments)
    - Pieces of media files with media fragments

- \`hreflang\`
  - : Hints at the human language of the linked URL. No built-in functionality. Allowed values are the same as [the global \`lang\` attribute](/en-US/docs/Web/HTML/Reference/Global_attributes/lang).
- \`ping\`
  - : A space-separated list of URLs. When the link is followed, the browser will send {{HTTPMethod("POST")}} requests with the body \`PING\` to the URLs. Typically for tracking.
- \`referrerpolicy\`
  - : How much of the [referrer](/en-US/docs/Web/HTTP/Reference/Headers/Referer) to send when following the link.
    - \`no-referrer\`: The {{HTTPHeader("Referer")}} header will not be sent.
    - \`no-referrer-when-downgrade\`: The {{HTTPHeader("Referer")}} header will not be sent to {{Glossary("origin")}}s without {{Glossary("TLS")}} ({{Glossary("HTTPS")}}).
    - \`origin\`: The sent referrer will be limited to the origin of the referring page: its [scheme](/en-US/docs/Learn_web_development/Howto/Web_mechanics/What_is_a_URL), {{Glossary("host")}}, and {{Glossary("port")}}.
    - \`origin-when-cross-origin\`: The referrer sent to other origins will be limited to the scheme, the host, and the port. Navigations on the same origin will still include the path.
    - \`same-origin\`: A referrer will be sent for {{Glossary("Same-origin policy", "same origin")}}, but cross-origin requests will contain no referrer information.
    - \`strict-origin\`: Only send the origin of the document as the referrer when the protocol security level stays the same (HTTPS→HTTPS), but don't send it to a less secure destination (HTTPS→HTTP).
    - \`strict-origin-when-cross-origin\` (default): Send a full URL when performing a same-origin request, only send the origin when the protocol security level stays the same (HTTPS→HTTPS), and send no header to a less secure destination (HTTPS→HTTP).
    - \`unsafe-url\`: The referrer will include the origin _and_ the path (but not the [fragment](/en-US/docs/Web/API/HTMLAnchorElement/hash), [password](/en-US/docs/Web/API/HTMLAnchorElement/password), or [username](/en-US/docs/Web/API/HTMLAnchorElement/username)). **This value is unsafe**, because it leaks origins and paths from TLS-protected resources to insecure origins.

- [\`rel\`](/en-US/docs/Web/HTML/Reference/Attributes/rel)
  - : The relationship of the linked URL as space-separated link types.
- \`target\`
  - : Where to display the linked URL, as the name for a _browsing context_ (a tab, window, or {{HTMLElement("iframe")}}). The following keywords have special meanings for where to load the URL:
    - \`_self\`: The current browsing context. (Default)
    - \`_blank\`: Usually a new tab, but users can configure browsers to open a new window instead.
    - \`_parent\`: The parent browsing context of the current one. If no parent, behaves as \`_self\`.
    - \`_top\`: The topmost browsing context. To be specific, this means the "highest" context that's an ancestor of the current one. If no ancestors, behaves as \`_self\`.
    - \`_unfencedTop\`: Allows embedded [fenced frames](/en-US/docs/Web/API/Fenced_frame_API) to navigate the top-level frame (i.e., traversing beyond the root of the fenced frame, unlike other reserved destinations). Note that the navigation will still succeed if this is used outside of a fenced frame context, but it will not act like a reserved keyword.

    > [!NOTE]
    > Setting \`target="_blank"\` on \`<a>\` elements implicitly provides the same \`rel\` behavior as setting [\`rel="noopener"\`](/en-US/docs/Web/HTML/Reference/Attributes/rel/noopener) which does not set \`window.opener\`.

- \`type\`
  - : Hints at the linked URL's format with a {{Glossary("MIME type")}}. No built-in functionality.

### Deprecated attributes

- \`charset\` {{Deprecated_Inline}}
  - : Hinted at the {{Glossary("character encoding")}} of the linked URL.

    > [!NOTE]
    > This attribute is deprecated and **should not be used by authors**. Use the HTTP {{HTTPHeader("Content-Type")}} header on the linked URL.

- \`coords\` {{Deprecated_Inline}}
  - : Used with [the \`shape\` attribute](#shape). A comma-separated list of coordinates.
- \`name\` {{Deprecated_Inline}}
  - : Was required to define a possible target location in a page. In HTML 4.01, \`id\` and \`name\` could both be used on \`<a>\`, as long as they had identical values.

    > [!NOTE]
    > Use the global attribute [\`id\`](/en-US/docs/Web/HTML/Reference/Global_attributes/id) instead.

- \`rev\` {{Deprecated_Inline}}
  - : Specified a reverse link; the opposite of [the \`rel\` attribute](#rel). Deprecated for being very confusing.
- \`shape\` {{Deprecated_Inline}}
  - : The shape of the hyperlink's region in an image map.

    > [!NOTE]
    > Use the {{HTMLElement("area")}} element for image maps instead.

## Accessibility

### Strong link text

**The content inside a link should indicate where the link goes**, even out of context.

#### Inaccessible, weak link text

A sadly common mistake is to only link the words "click here" or "here":

\`\`\`html example-bad
<p>Learn more about our products <a href="/products">here</a>.</p>
\`\`\`

##### Result

{{EmbedLiveSample('Inaccessible, weak link text', '100%', '50')}}

#### Accessible, strong link text

Luckily, this is an easy fix, and it's actually shorter than the inaccessible version!

\`\`\`html example-good
<p>Learn more <a href="/products">about our products</a>.</p>
\`\`\`

##### Result

{{EmbedLiveSample('Accessible, strong link text', '100%', '50')}}

Assistive software has shortcuts to list all links on a page. However, strong link text benefits all users — the "list all links" shortcut emulates how sighted users quickly scan pages.

### onclick events

Anchor elements are often abused as fake buttons by setting their \`href\` to \`#\` or [\`javascript:void(0)\`](/en-US/docs/Web/URI/Reference/Schemes/javascript) to prevent the page from refreshing, then listening for their \`click\` events.

These bogus \`href\` values cause unexpected behavior when copying/dragging links, opening links in a new tab/window, bookmarking, or when JavaScript is loading, errors, or is disabled. They also convey incorrect semantics to assistive technologies, like screen readers.

Use a {{HTMLElement("button")}} instead. In general, **you should only use a hyperlink for navigation to a real URL**.

### External links and linking to non-HTML resources

Links that open in a new tab/window via \`target="_blank"\`, or links that point to a download file should indicate what will happen when the link is followed.

People experiencing low vision conditions, navigating with the aid of screen reading technology, or with cognitive concerns may be confused when a new tab, window, or application opens unexpectedly. Older screen-reading software may not even announce the behavior.

#### Link that opens a new tab/window

\`\`\`html
<a target="_blank" href="https://www.wikipedia.org">
  Wikipedia (opens in new tab)
</a>
\`\`\`

##### Result

{{EmbedLiveSample('Link that opens a new tab/window')}}

#### Link to a non-HTML resource

If an icon is used to signify link behavior, make sure it has an [\`alt\` attribute](/en-US/docs/Web/HTML/Reference/Elements/img#alt) to describe its purpose. In case the icon is missing, the \`alt\` attribute's content will still convey the link's behavior.

\`\`\`html
<p>
  <a href="https://www.wikipedia.org/" target="_blank">
    Wikipedia
    <img src="new-tab.svg" width="14" alt="(Opens in new tab)" />
  </a>
  <br />
  <a href="2017-annual-report.ppt">
    2017 annual report
    <img src="powerpoint.svg" width="14" alt="(PowerPoint file)" />
  </a>
</p>
<p>
  <a href="https://www.wikipedia.org/" target="_blank">
    Wikipedia
    <img src="missing-icon.svg" width="14" alt="(Opens in new tab)" />
  </a>
  <br />
  <a href="2017-annual-report.ppt">
    2017 annual report
    <img src="missing-icon.svg" width="14" alt="(PowerPoint file)" />
  </a>
</p>
\`\`\`

##### Result

{{EmbedLiveSample('Link to a non-HTML resource')}}

- [WebAIM: Links and Hypertext - Hypertext Links](https://webaim.org/techniques/hypertext/hypertext_links)
- [MDN / Understanding WCAG, Guideline 3.2](/en-US/docs/Web/Accessibility/Guides/Understanding_WCAG/Understandable#guideline_3.2_—_predictable_make_web_pages_appear_and_operate_in_predictable_ways)
- [G200: Opening new windows and tabs from a link only when necessary](https://www.w3.org/TR/WCAG20-TECHS/G200.html)
- [G201: Giving users advanced warning when opening a new window](https://www.w3.org/TR/WCAG20-TECHS/G201.html)

### Skip links

A **skip link** is a link placed as early as possible in {{HTMLElement("body")}} content that points to the beginning of the page's main content. Usually, CSS hides a skip link offscreen until focused.

\`\`\`html
<body>
  <a href="#content" class="skip-link">Skip to main content</a>

  <header>…</header>

  <!-- The skip link jumps to here -->
  <main id="content"></main>
</body>
\`\`\`

\`\`\`css
.skip-link {
  position: absolute;
  top: -3em;
  background: white;
}
.skip-link:focus {
  top: 0;
}
\`\`\`

#### Result

{{EmbedLiveSample('Skip links')}}

Skip links let keyboard users bypass content repeated throughout multiple pages, such as header navigation.

Skip links are especially useful for people who navigate with the aid of assistive technology such as switch control, voice command, or mouth sticks/head wands, where the act of moving through repetitive links can be laborious.

- [WebAIM: "Skip Navigation" Links](https://webaim.org/techniques/skipnav/)
- [How-to: Use Skip Navigation links](https://www.a11yproject.com/posts/skip-nav-links/)
- [MDN / Understanding WCAG, Guideline 2.4 explanations](/en-US/docs/Web/Accessibility/Guides/Understanding_WCAG/Operable#guideline_2.4_%e2%80%94_navigable_provide_ways_to_help_users_navigate_find_content_and_determine_where_they_are)
- [Understanding Success Criterion 2.4.1](https://www.w3.org/TR/UNDERSTANDING-WCAG20/navigation-mechanisms-skip.html)

### Size and proximity

#### Size

Interactive elements, like links, should provide an area large enough that it is easy to activate them. This helps a variety of people, including those with motor control issues and those using imprecise inputs such as a touchscreen. A minimum size of 44×44 [CSS pixels](https://w3c.github.io/wcag/guidelines/22/#dfn-css-pixels) is recommended.

Text-only links in prose content are exempt from this requirement, but it's still a good idea to make sure enough text is hyperlinked to be easily activated.

- [Understanding Success Criterion 2.5.5: Target Size](https://www.w3.org/WAI/WCAG21/Understanding/target-size.html)
- [Target Size and 2.5.5](https://adrianroselli.com/2019/06/target-size-and-2-5-5.html)
- [Quick test: Large touch targets](https://www.a11yproject.com/posts/large-touch-targets/)

#### Proximity

Interactive elements, like links, placed in close visual proximity should have space separating them. Spacing helps people with motor control issues, who may otherwise accidentally activate the wrong interactive content.

Spacing may be created using CSS properties like {{CSSxRef("margin")}}.

- [Hand tremors and the giant-button-problem](https://axesslab.com/hand-tremors/)

## Examples

### Linking to an absolute URL

#### HTML

\`\`\`html
<a href="https://www.mozilla.com">Mozilla</a>
\`\`\`

#### Result

{{EmbedLiveSample('Linking_to_an_absolute_URL')}}

### Linking to relative URLs

#### HTML

\`\`\`html
<a href="//example.com">Scheme-relative URL</a>
<a href="/en-US/docs/Web/HTML">Origin-relative URL</a>
<a href="p">Directory-relative URL</a>
<a href="./p">Directory-relative URL</a>
<a href="../p">Parent-directory-relative URL</a>
\`\`\`

\`\`\`css hidden
a {
  display: block;
  margin-bottom: 0.5em;
}
\`\`\`

#### Result

{{EmbedLiveSample('Linking_to_relative_URLs')}}

### Linking to an element on the same page

\`\`\`html
<!-- <a> element links to the section below -->
<p><a href="#Section_further_down">Jump to the heading below</a></p>

<!-- Heading to link to -->
<h2 id="Section_further_down">Section further down</h2>
\`\`\`

#### Result

{{EmbedLiveSample('Linking to an element on the same page')}}

> [!NOTE]
> You can use \`href="#top"\` or the empty fragment (\`href="#"\`) to link to the top of the current page, [as defined in the HTML specification](https://html.spec.whatwg.org/multipage/browsing-the-web.html#scroll-to-the-fragment-identifier).

### Linking to an email address

To create links that open in the user's email program to let them send a new message, use the \`mailto:\` scheme:

\`\`\`html
<a href="mailto:nowhere@mozilla.org">Send email to nowhere</a>
\`\`\`

#### Result

{{EmbedLiveSample('Linking to an email address')}}

For details about \`mailto:\` URLs, such as including a subject or body, see [Email links](/en-US/docs/Learn_web_development/Core/Structuring_content/Creating_links#email_links) or {{RFC(6068)}}.

### Linking to telephone numbers

\`\`\`html
<a href="tel:+49.157.0156">+49 157 0156</a>
<a href="tel:+1(800)555-0123">(800) 555-0123</a>
\`\`\`

#### Result

{{EmbedLiveSample('Linking to telephone numbers')}}

\`tel:\` link behavior varies with device capabilities:

- Cellular devices autodial the number.
- Most operating systems have programs that can make calls, like Skype or FaceTime.
- Websites can make phone calls with {{domxref("Navigator/registerProtocolHandler", "registerProtocolHandler")}}, such as \`web.skype.com\`.
- Other behaviors include saving the number to contacts, or sending the number to another device.

See {{RFC(3966)}} for syntax, additional features, and other details about the \`tel:\` URL scheme.

### Using the download attribute to save a \\<canvas> as a PNG

To save a {{HTMLElement("canvas")}} element's contents as an image, you can create a link where the \`href\` is the canvas data as a \`data:\` URL created with JavaScript and the \`download\` attribute provides the file name for the downloaded PNG file:

#### Example painting app with save link

##### HTML

\`\`\`html
<p>
  Paint by holding down the mouse button and moving it.
  <a href="" download="my_painting.png">Download my painting</a>
</p>

<canvas width="300" height="300"></canvas>
\`\`\`

##### CSS

\`\`\`css
html {
  font-family: sans-serif;
}
canvas {
  background: white;
  border: 1px dashed;
}
a {
  display: inline-block;
  background: #6699cc;
  color: white;
  padding: 5px 10px;
}
\`\`\`

##### JavaScript

\`\`\`js
const canvas = document.querySelector("canvas");
const c = canvas.getContext("2d");
c.fillStyle = "hotpink";
let isDrawing;

function draw(x, y) {
  if (isDrawing) {
    c.beginPath();
    c.arc(x, y, 10, 0, Math.PI * 2);
    c.closePath();
    c.fill();
  }
}

canvas.addEventListener("mousemove", (event) =>
  draw(event.offsetX, event.offsetY),
);
canvas.addEventListener("mousedown", () => (isDrawing = true));
canvas.addEventListener("mouseup", () => (isDrawing = false));

document
  .querySelector("a")
  .addEventListener(
    "click",
    (event) => (event.target.href = canvas.toDataURL()),
  );
\`\`\`

##### Result

{{EmbedLiveSample('Example_painting_app_with_save_link', '100%', '400')}}

## Security and privacy

\`<a>\` elements can have consequences for users' security and privacy. See [\`Referer\` header: privacy and security concerns](/en-US/docs/Web/Security/Referer_header:_privacy_and_security_concerns) for information.

Using \`target="_blank"\` without [\`rel="noreferrer"\`](/en-US/docs/Web/HTML/Reference/Attributes/rel/noreferrer) and [\`rel="noopener"\`](/en-US/docs/Web/HTML/Reference/Attributes/rel/noopener) makes the website vulnerable to {{domxref("window.opener")}} API exploitation attacks, although note that, in newer browser versions setting \`target="_blank"\` implicitly provides the same protection as setting \`rel="noopener"\`. See [browser compatibility](#browser_compatibility) for details.

## Technical summary

<table class="properties">
  <tbody>
    <tr>
      <th scope="row">
        <a href="/en-US/docs/Web/HTML/Guides/Content_categories"
          >Content categories</a
        >
      </th>
      <td>
        <a href="/en-US/docs/Web/HTML/Guides/Content_categories#flow_content"
          >Flow content</a
        >,
        <a href="/en-US/docs/Web/HTML/Guides/Content_categories#phrasing_content"
          >phrasing content</a
        >,
        <a
          href="/en-US/docs/Web/HTML/Guides/Content_categories#interactive_content"
          >interactive content</a
        >, palpable content.
      </td>
    </tr>
    <tr>
      <th scope="row">Permitted content</th>
      <td>
        <a
          href="/en-US/docs/Web/HTML/Guides/Content_categories#transparent_content_model"
          >Transparent</a
        >, except that no descendant may be
        <a
          href="/en-US/docs/Web/HTML/Guides/Content_categories#interactive_content"
          >interactive content</a
        > or an
        <code>&lt;a&gt;</code> element, and no descendant may have a specified
        <a
          href="/en-US/docs/Web/HTML/Reference/Global_attributes/tabindex"
          >tabindex</a
        > attribute.
      </td>
    </tr>
    <tr>
      <th scope="row">Tag omission</th>
      <td>None, both the starting and ending tag are mandatory.</td>
    </tr>
    <tr>
      <th scope="row">Permitted parents</th>
      <td>
        Any element that accepts
        <a href="/en-US/docs/Web/HTML/Guides/Content_categories#flow_content"
          >flow content</a
        >, but not other <code>&lt;a&gt;</code> elements.
      </td>
    </tr>
    <tr>
      <th scope="row">Implicit ARIA role</th>
      <td>
        <a href="/en-US/docs/Web/Accessibility/ARIA/Reference/Roles/link_role"><code>link</code></a> when <code>href</code> attribute is
        present, otherwise
        <a href="/en-US/docs/Web/Accessibility/ARIA/Reference/Roles/generic_role"><code>generic</code></a>
      </td>
    </tr>
    <tr>
      <th scope="row">Permitted ARIA roles</th>
      <td>
        <p>When <code>href</code> attribute is present:</p>
        <ul>
          <li><a href="/en-US/docs/Web/Accessibility/ARIA/Reference/Roles/button_role"><code>button</code></a></li>
          <li><a href="/en-US/docs/Web/Accessibility/ARIA/Reference/Roles/checkbox_role"><code>checkbox</code></a></li>
          <li><a href="/en-US/docs/Web/Accessibility/ARIA/Reference/Roles/menuitem_role"><code>menuitem</code></a></li>
          <li><a href="/en-US/docs/Web/Accessibility/ARIA/Reference/Roles/menuitemcheckbox_role"><code>menuitemcheckbox</code></a></li>
          <li><a href="/en-US/docs/Web/Accessibility/ARIA/Reference/Roles/menuitemradio_role"><code>menuitemradio</code></a></li>
          <li><a href="/en-US/docs/Web/Accessibility/ARIA/Reference/Roles/option_role"><code>option</code></a></li>
          <li><a href="/en-US/docs/Web/Accessibility/ARIA/Reference/Roles/radio_role"><code>radio</code></a></li>
          <li><a href="/en-US/docs/Web/Accessibility/ARIA/Reference/Roles/switch_role"><code>switch</code></a></li>
          <li><a href="/en-US/docs/Web/Accessibility/ARIA/Reference/Roles/tab_role"><code>tab</code></a></li>
          <li><a href="/en-US/docs/Web/Accessibility/ARIA/Reference/Roles/treeitem_role"><code>treeitem</code></a></li>
        </ul>
        <p>When <code>href</code> attribute is not present:</p>
        <ul>
          <li>any</li>
        </ul>
      </td>
    </tr>
    <tr>
      <th scope="row">DOM interface</th>
      <td>{{DOMxRef("HTMLAnchorElement")}}</td>
    </tr>
  </tbody>
</table>

## Specifications

{{Specifications}}

## Browser compatibility

{{Compat}}

## See also

- {{HTMLElement("link")}} is similar to \`<a>\`, but for metadata hyperlinks that are invisible to users.
- {{CSSxRef(":link")}} is a CSS pseudo-class that will match \`<a>\` elements with URL in \`href\` attribute that was not yet visited by the user.
- {{CSSxRef(":visited")}} is a CSS pseudo-class that will match \`<a>\` elements with URL in \`href\` attribute that was visited by the user in the past.
- {{CSSxRef(":any-link")}} is a CSS pseudo-class that will match \`<a>\` elements with \`href\` attribute.
- [Text fragments](/en-US/docs/Web/URI/Reference/Fragment/Text_fragments) are user-agent instructions added to URLs that allow content authors to link to specific text on a page, without IDs being required.
"
`;

exports[`getMDNFile appends \`index.md\` when provided a directory 3`] = `
"---
title: color
slug: Web/CSS/color
page-type: css-property
browser-compat: css.properties.color
sidebar: cssref
---

The **\`color\`** [CSS](/en-US/docs/Web/CSS) property sets the foreground [color value](/en-US/docs/Web/CSS/color_value) of an element's text and [text decorations](/en-US/docs/Web/CSS/text-decoration), and sets the [\`currentColor\`](/en-US/docs/Web/CSS/color_value#currentcolor_keyword) value. \`currentColor\` may be used as an indirect value on _other_ properties and is the default for other color properties, such as {{cssxref("border-color")}}.

{{InteractiveExample("CSS Demo: color")}}

\`\`\`css interactive-example-choice
color: rebeccapurple;
\`\`\`

\`\`\`css interactive-example-choice
color: #00a400;
\`\`\`

\`\`\`css interactive-example-choice
color: rgb(214 122 127);
\`\`\`

\`\`\`css interactive-example-choice
color: hsl(30deg 82% 43%);
\`\`\`

\`\`\`css interactive-example-choice
color: hsl(237deg 74% 33% / 61%);
\`\`\`

\`\`\`css interactive-example-choice
color: hwb(152deg 0% 58% / 70%);
\`\`\`

\`\`\`html interactive-example
<section id="default-example">
  <div class="example-container">
    <p id="example-element">
      London. Michaelmas term lately over, and the Lord Chancellor sitting in
      Lincoln's Inn Hall. Implacable November weather.
    </p>
  </div>
</section>
\`\`\`

\`\`\`css interactive-example
#example-element {
  font-size: 1.5em;
}

.example-container {
  background-color: white;
  padding: 10px;
}
\`\`\`

For an overview of using color in HTML, see [Applying color to HTML elements using CSS](/en-US/docs/Web/CSS/CSS_colors/Applying_color).

## Syntax

\`\`\`css
/* Keyword values */
color: currentColor;

/* <named-color> values */
color: red;
color: orange;
color: tan;
color: rebeccapurple;

/* <hex-color> values */
color: #090;
color: #009900;
color: #090a;
color: #009900aa;

/* <rgb()> values and legacy <rgba()> values*/
color: rgb(34, 12, 64);
color: rgb(34, 12, 64, 0.6);
color: rgba(34, 12, 64, 0.6);
color: rgb(34 12 64 / 0.6);
color: rgba(34 12 64 / 0.6);
color: rgb(34.6 12 64 / 60%);
color: rgba(34.6 12 64 / 60%);

/* <hsl()> values and legacy <hsla()> values */
color: hsl(30, 100%, 50%);
color: hsl(30, 100%, 50%, 0.6);
color: hsla(30, 100%, 50%, 0.6);
color: hsl(30 100% 50% / 0.6);
color: hsla(30 100% 50% / 0.6);
color: hsl(30.2 100% 50% / 60%);
color: hsla(30.2 100% 50% / 60%);

/* <hwb()> values */
color: hwb(90 10% 10%);
color: hwb(90 10% 10% / 0.5);
color: hwb(90deg 10% 10%);
color: hwb(1.5708rad 60% 0%);
color: hwb(0.25turn 0% 40% / 50%);

/* Global values */
color: inherit;
color: initial;
color: revert;
color: revert-layer;
color: unset;
\`\`\`

The \`color\` property is specified as a single {{cssxref("&lt;color&gt;")}} value.

Note that the value must be a uniform color. It can't be a {{cssxref("&lt;gradient&gt;")}}, which is actually a type of {{cssxref("&lt;image&gt;")}}.

### Values

- {{cssxref("&lt;color&gt;")}}
  - : Sets the color of the textual and decorative parts of the element.
- [\`currentColor\`](/en-US/docs/Web/CSS/color_value#currentcolor_keyword)
  - : Sets the color to the element's \`color\` property value. However, if set as the value of \`color\`, \`currentColor\` is treated as \`inherit\`.

## Accessibility

It is important to ensure that the contrast ratio between the color of the text and the background the text is placed over is high enough that people experiencing low vision conditions will be able to read the content of the page.

Color contrast ratio is determined by comparing the luminosity of the text and background color values. In order to meet current [Web Content Accessibility Guidelines (WCAG)](https://www.w3.org/WAI/standards-guidelines/wcag/), a ratio of 4.5:1 is required for text content and 3:1 for larger text such as headings. Large text is defined as 18.66px and [bold](/en-US/docs/Web/CSS/font-weight) or larger, or 24px or larger.

- [WebAIM: Color Contrast Checker](https://webaim.org/resources/contrastchecker/)
- [MDN Understanding WCAG, Guideline 1.4 explanations](/en-US/docs/Web/Accessibility/Guides/Understanding_WCAG/Perceivable#guideline_1.4_make_it_easier_for_users_to_see_and_hear_content_including_separating_foreground_from_background)
- [Understanding Success Criterion 1.4.3 | W3C Understanding WCAG 2.0](https://www.w3.org/TR/UNDERSTANDING-WCAG20/visual-audio-contrast-contrast.html)

## Formal definition

{{cssinfo}}

## Formal syntax

{{csssyntax}}

## Examples

### Making text red

The following are all ways to make a paragraph's text red:

\`\`\`css
p {
  color: red;
}
p {
  color: #f00;
}
p {
  color: #ff0000;
}
p {
  color: rgb(255 0 0);
}
p {
  color: rgb(100% 0% 0%);
}
p {
  color: hsl(0 100% 50%);
}

/* 50% translucent */
p {
  color: #ff000080;
}
p {
  color: rgb(255 0 0 / 50%);
}
p {
  color: hsl(0 100% 50% / 50%);
}
\`\`\`

## Specifications

{{Specifications}}

## Browser compatibility

{{Compat}}

## See also

- The {{cssxref("&lt;color&gt;")}} data type
- Other color-related properties: {{cssxref("background-color")}}, {{cssxref("border-color")}}, {{cssxref("outline-color")}}, {{cssxref("text-decoration-color")}}, {{cssxref("text-emphasis-color")}}, {{cssxref("text-shadow")}}, {{cssxref("caret-color")}}, {{cssxref("column-rule-color")}}, and {{cssxref("print-color-adjust")}}
- SVG {{SVGAttr("color")}} attribute
- [Applying color to HTML elements using CSS](/en-US/docs/Web/CSS/CSS_colors/Applying_color)
- [WCAG: color contrast](/en-US/docs/Web/Accessibility/Guides/Understanding_WCAG/Perceivable/Color_contrast)
"
`;

exports[`getMDNFile returns MDN doc when provided valid parameters 1`] = `
"---
title: Array.prototype.filter()
short-title: filter()
slug: Web/JavaScript/Reference/Global_Objects/Array/filter
page-type: javascript-instance-method
browser-compat: javascript.builtins.Array.filter
sidebar: jsref
---

The **\`filter()\`** method of {{jsxref("Array")}} instances creates a [shallow copy](/en-US/docs/Glossary/Shallow_copy) of a portion of a given array, filtered down to just the elements from the given array that pass the test implemented by the provided function.

{{InteractiveExample("JavaScript Demo: Array.prototype.filter()", "shorter")}}

\`\`\`js interactive-example
const words = ["spray", "elite", "exuberant", "destruction", "present"];

const result = words.filter((word) => word.length > 6);

console.log(result);
// Expected output: Array ["exuberant", "destruction", "present"]
\`\`\`

## Syntax

\`\`\`js-nolint
filter(callbackFn)
filter(callbackFn, thisArg)
\`\`\`

### Parameters

- \`callbackFn\`
  - : A function to execute for each element in the array. It should return a [truthy](/en-US/docs/Glossary/Truthy) value to keep the element in the resulting array, and a [falsy](/en-US/docs/Glossary/Falsy) value otherwise. The function is called with the following arguments:
    - \`element\`
      - : The current element being processed in the array.
    - \`index\`
      - : The index of the current element being processed in the array.
    - \`array\`
      - : The array \`filter()\` was called upon.
- \`thisArg\` {{optional_inline}}
  - : A value to use as \`this\` when executing \`callbackFn\`. See [iterative methods](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods).

### Return value

A [shallow copy](/en-US/docs/Glossary/Shallow_copy) of the given array containing just the elements that pass the test. If no elements pass the test, an empty array is returned.

## Description

The \`filter()\` method is an [iterative method](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods). It calls a provided \`callbackFn\` function once for each element in an array, and constructs a new array of all the values for which \`callbackFn\` returns a [truthy](/en-US/docs/Glossary/Truthy) value. Array elements which do not pass the \`callbackFn\` test are not included in the new array. Read the [iterative methods](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods) section for more information about how these methods work in general.

\`callbackFn\` is invoked only for array indexes which have assigned values. It is not invoked for empty slots in [sparse arrays](/en-US/docs/Web/JavaScript/Guide/Indexed_collections#sparse_arrays).

The \`filter()\` method is [generic](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#generic_array_methods). It only expects the \`this\` value to have a \`length\` property and integer-keyed properties.

## Examples

### Filtering out all small values

The following example uses \`filter()\` to create a filtered array that has all elements with values less than 10 removed.

\`\`\`js
function isBigEnough(value) {
  return value >= 10;
}

const filtered = [12, 5, 8, 130, 44].filter(isBigEnough);
// filtered is [12, 130, 44]
\`\`\`

### Find all prime numbers in an array

The following example returns all prime numbers in the array:

\`\`\`js
const array = [-3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13];

function isPrime(n) {
  if (n < 2) {
    return false;
  }
  if (n % 2 === 0) {
    return n === 2;
  }
  for (let factor = 3; factor * factor <= n; factor += 2) {
    if (n % factor === 0) {
      return false;
    }
  }
  return true;
}

console.log(array.filter(isPrime)); // [2, 3, 5, 7, 11, 13]
\`\`\`

> [!NOTE]
> The \`isPrime()\` implementation is for demonstration only. For a real-world application, you would want to use a heavily memoized algorithm such as the [Sieve of Eratosthenes](https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes) to avoid repeated calculations.

### Filtering invalid entries from JSON

The following example uses \`filter()\` to create a filtered JSON of all elements with non-zero, numeric \`id\`.

\`\`\`js
const arr = [
  { id: 15 },
  { id: -1 },
  { id: 0 },
  { id: 3 },
  { id: 12.2 },
  {},
  { id: null },
  { id: NaN },
  { id: "undefined" },
];

let invalidEntries = 0;

function filterByID(item) {
  if (Number.isFinite(item.id) && item.id !== 0) {
    return true;
  }
  invalidEntries++;
  return false;
}

const arrByID = arr.filter(filterByID);

console.log("Filtered Array\\n", arrByID);
// Filtered Array
// [{ id: 15 }, { id: -1 }, { id: 3 }, { id: 12.2 }]

console.log("Number of Invalid Entries =", invalidEntries);
// Number of Invalid Entries = 5
\`\`\`

### Searching in array

Following example uses \`filter()\` to filter array content based on search criteria.

\`\`\`js
const fruits = ["apple", "banana", "grapes", "mango", "orange"];

/**
 * Filter array items based on search criteria (query)
 */
function filterItems(arr, query) {
  return arr.filter((el) => el.toLowerCase().includes(query.toLowerCase()));
}

console.log(filterItems(fruits, "ap")); // ['apple', 'grapes']
console.log(filterItems(fruits, "an")); // ['banana', 'mango', 'orange']
\`\`\`

### Using the third argument of callbackFn

The \`array\` argument is useful if you want to access another element in the array, especially when you don't have an existing variable that refers to the array. The following example first uses \`map()\` to extract the numerical ID from each name and then uses \`filter()\` to select the ones that are greater than its neighbors.

\`\`\`js
const names = ["JC63", "Bob132", "Ursula89", "Ben96"];
const greatIDs = names
  .map((name) => parseInt(name.match(/\\d+/)[0], 10))
  .filter((id, idx, arr) => {
    // Without the arr argument, there's no way to easily access the
    // intermediate array without saving it to a variable.
    if (idx > 0 && id <= arr[idx - 1]) return false;
    if (idx < arr.length - 1 && id <= arr[idx + 1]) return false;
    return true;
  });
console.log(greatIDs); // [132, 96]
\`\`\`

The \`array\` argument is _not_ the array that is being built — there is no way to access the array being built from the callback function.

### Using filter() on sparse arrays

\`filter()\` will skip empty slots.

\`\`\`js
console.log([1, , undefined].filter((x) => x === undefined)); // [undefined]
console.log([1, , undefined].filter((x) => x !== 2)); // [1, undefined]
\`\`\`

### Calling filter() on non-array objects

The \`filter()\` method reads the \`length\` property of \`this\` and then accesses each property whose key is a nonnegative integer less than \`length\`.

\`\`\`js
const arrayLike = {
  length: 3,
  0: "a",
  1: "b",
  2: "c",
  3: "a", // ignored by filter() since length is 3
};
console.log(Array.prototype.filter.call(arrayLike, (x) => x <= "b"));
// [ 'a', 'b' ]
\`\`\`

## Specifications

{{Specifications}}

## Browser compatibility

{{Compat}}

## See also

- [Polyfill of \`Array.prototype.filter\` in \`core-js\`](https://github.com/zloirock/core-js#ecmascript-array)
- [es-shims polyfill of \`Array.prototype.filter\`](https://www.npmjs.com/package/array.prototype.filter)
- [Indexed collections](/en-US/docs/Web/JavaScript/Guide/Indexed_collections) guide
- {{jsxref("Array")}}
- {{jsxref("Array.prototype.forEach()")}}
- {{jsxref("Array.prototype.every()")}}
- {{jsxref("Array.prototype.map()")}}
- {{jsxref("Array.prototype.some()")}}
- {{jsxref("Array.prototype.reduce()")}}
- {{jsxref("TypedArray.prototype.filter()")}}
"
`;

exports[`getMDNFile returns MDN doc when provided valid parameters 2`] = `
"---
title: "<div>: The Content Division element"
slug: Web/HTML/Reference/Elements/div
page-type: html-element
browser-compat: html.elements.div
sidebar: htmlsidebar
---

The **\`<div>\`** [HTML](/en-US/docs/Web/HTML) element is the generic container for flow content. It has no effect on the content or layout until styled in some way using {{glossary("CSS")}} (e.g., styling is directly applied to it, or some kind of layout model like [Flexbox](/en-US/docs/Web/CSS/CSS_flexible_box_layout) is applied to its parent element).

{{InteractiveExample("HTML Demo: &lt;div&gt;", "tabbed-standard")}}

\`\`\`html interactive-example
<div class="warning">
  <img
    src="/shared-assets/images/examples/leopard.jpg"
    alt="An intimidating leopard." />
  <p>Beware of the leopard</p>
</div>
\`\`\`

\`\`\`css interactive-example
.warning {
  border: 10px ridge red;
  background-color: yellow;
  padding: 0.5rem;
  display: flex;
  flex-direction: column;
}

.warning img {
  width: 100%;
}

.warning p {
  font: small-caps bold 1.2rem sans-serif;
  text-align: center;
}
\`\`\`

As a "pure" container, the \`<div>\` element does not inherently represent anything. Instead, it's used to group content so it can be easily styled using the [\`class\`](/en-US/docs/Web/HTML/Reference/Global_attributes/class) or [\`id\`](/en-US/docs/Web/HTML/Reference/Global_attributes/id) attributes, marking a section of a document as being written in a different language (using the [\`lang\`](/en-US/docs/Web/HTML/Reference/Global_attributes/lang) attribute), and so on.

## Attributes

This element includes the [global attributes](/en-US/docs/Web/HTML/Reference/Global_attributes).

> [!NOTE]
> The \`align\` attribute is obsolete; do not use it anymore. Instead, you should use CSS properties or techniques such as [CSS Grid](/en-US/docs/Web/CSS/CSS_grid_layout) or [CSS Flexbox](/en-US/docs/Learn_web_development/Core/CSS_layout/Flexbox) to align and position \`<div>\` elements on the page.

## Usage notes

- The \`<div>\` element should be used only when no other semantic element (such as {{HTMLElement("article")}} or {{HTMLElement("nav")}}) is appropriate.

## Accessibility

The \`<div>\` element has [an implicit role of \`generic\`](https://w3c.github.io/aria/#generic), and not none. This may affect certain ARIA combination declarations that expect a direct descendant element with a certain role to function properly.

## Examples

### A basic example

\`\`\`html
<div>
  <p>
    Any kind of content here. Such as &lt;p&gt;, &lt;table&gt;. You name it!
  </p>
</div>
\`\`\`

#### Result

{{EmbedLiveSample("A_basic_example", 650, 60)}}

### A styled example

This example creates a shadowed box by applying a style to the \`<div>\` using CSS. Note the use of the [\`class\`](/en-US/docs/Web/HTML/Reference/Global_attributes/class) attribute on the \`<div>\` to apply the style named \`"shadowbox"\` to the element.

#### HTML

\`\`\`html
<div class="shadowbox">
  <p>Here's a very interesting note displayed in a lovely shadowed box.</p>
</div>
\`\`\`

#### CSS

\`\`\`css
.shadowbox {
  width: 15em;
  border: 1px solid #333333;
  box-shadow: 8px 8px 5px #444444;
  padding: 8px 12px;
  background-image: linear-gradient(180deg, white, #dddddd 40%, #cccccc);
}
\`\`\`

#### Result

{{EmbedLiveSample("A_styled_example", 650, 120)}}

## Technical summary

<table class="properties">
  <tbody>
    <tr>
      <th scope="row">
        <a href="/en-US/docs/Web/HTML/Guides/Content_categories"
          >Content categories</a
        >
      </th>
      <td>
        <a href="/en-US/docs/Web/HTML/Guides/Content_categories#flow_content"
          >Flow content</a
        >, <a href="/en-US/docs/Web/HTML/Guides/Content_categories#palpable_content">palpable content</a>.
      </td>
    </tr>
    <tr>
      <th scope="row">Permitted content</th>
      <td>
        <a href="/en-US/docs/Web/HTML/Guides/Content_categories#flow_content"
          >Flow content</a
        >.<br />Or (in {{glossary("WHATWG")}} HTML): If the parent is a
        {{HTMLElement("dl")}} element: one or more
        {{HTMLElement("dt")}} elements followed by one or more
        {{HTMLElement("dd")}} elements, optionally intermixed with
        {{HTMLElement("script")}} and
        {{HTMLElement("template")}} elements.
      </td>
    </tr>
    <tr>
      <th scope="row">Tag omission</th>
      <td>None, both the starting and ending tag are mandatory.</td>
    </tr>
    <tr>
      <th scope="row">Permitted parents</th>
      <td>
        Any element that accepts
        <a href="/en-US/docs/Web/HTML/Guides/Content_categories#flow_content"
          >flow content</a
        >.<br />Or (in {{glossary("WHATWG")}} HTML):
        {{HTMLElement("dl")}} element.
      </td>
    </tr>
    <tr>
      <th scope="row">Implicit ARIA role</th>
      <td>
        <code
          ><a href="/en-US/docs/Web/Accessibility/ARIA/Reference/Roles/generic_role"
            >generic</a
          ></code
        >
      </td>
    </tr>
    <tr>
      <th scope="row">Permitted ARIA roles</th>
      <td>Any</td>
    </tr>
    <tr>
      <th scope="row">DOM interface</th>
      <td>{{domxref("HTMLDivElement")}}</td>
    </tr>
  </tbody>
</table>

## Specifications

{{Specifications}}

## Browser compatibility

{{Compat}}

## See also

- Semantic sectioning elements: {{HTMLElement("section")}}, {{HTMLElement("article")}}, {{HTMLElement("nav")}}, {{HTMLElement("header")}}, {{HTMLElement("footer")}}
- {{HTMLElement("span")}} element for styling of phrasing content
"
`;

exports[`getMDNFile returns MDN doc when provided valid parameters 3`] = `
"---
title: border
slug: Web/CSS/border
page-type: css-shorthand-property
browser-compat: css.properties.border
sidebar: cssref
---

The **\`border\`** [shorthand](/en-US/docs/Web/CSS/CSS_cascade/Shorthand_properties) [CSS](/en-US/docs/Web/CSS) property sets an element's border. It sets the values of {{Cssxref("border-width")}}, {{Cssxref("border-style")}}, and {{Cssxref("border-color")}}.

{{InteractiveExample("CSS Demo: border")}}

\`\`\`css interactive-example-choice
border: solid;
\`\`\`

\`\`\`css interactive-example-choice
border: dashed red;
\`\`\`

\`\`\`css interactive-example-choice
border: 1rem solid;
\`\`\`

\`\`\`css interactive-example-choice
border: thick double #32a1ce;
\`\`\`

\`\`\`css interactive-example-choice
border: 4mm ridge rgb(211 220 50 / 0.6);
\`\`\`

\`\`\`html interactive-example
<section class="default-example" id="default-example">
  <div class="transition-all" id="example-element">
    This is a box with a border around it.
  </div>
</section>
\`\`\`

\`\`\`css interactive-example
#example-element {
  background-color: #eeeeee;
  color: darkmagenta;
  padding: 0.75em;
  width: 80%;
  height: 100px;
}
\`\`\`

## Constituent properties

This property is a shorthand for the following CSS properties:

- [\`border-width\`](/en-US/docs/Web/CSS/border-width)
- [\`border-style\`](/en-US/docs/Web/CSS/border-style)
- [\`border-color\`](/en-US/docs/Web/CSS/border-color)

## Syntax

\`\`\`css
/* style */
border: solid;

/* width | style */
border: 2px dotted;

/* style | color */
border: outset #ff3333;

/* width | style | color */
border: medium dashed green;

/* Global values */
border: inherit;
border: initial;
border: revert;
border: revert-layer;
border: unset;
\`\`\`

The \`border\` property may be specified using one, two, or three of the values listed below. The order of the values does not matter.

> [!NOTE]
> The border will be invisible if its style is not defined. This is because the style defaults to \`none\`.

### Values

- \`<line-width>\`
  - : Sets the thickness of the border. Defaults to \`medium\` if absent. See {{Cssxref("border-width")}}.
- {{cssxref("&lt;line-style&gt;")}}
  - : Sets the style of the border. Defaults to \`none\` if absent. See {{Cssxref("border-style")}}.
- {{cssxref("&lt;color&gt;")}}
  - : Sets the color of the border. Defaults to \`currentColor\` if absent. See {{Cssxref("border-color")}}.

## Description

As with all shorthand properties, any omitted sub-values will be set to their [initial value](/en-US/docs/Web/CSS/CSS_cascade/Value_processing#initial_value). Importantly, \`border\` cannot be used to specify a custom value for {{cssxref("border-image")}}, but instead sets it to its initial value, i.e., \`none\`.

The \`border\` shorthand is especially useful when you want all four borders to be the same. To make them different from each other, however, you can use the longhand {{Cssxref("border-width")}}, {{Cssxref("border-style")}}, and {{Cssxref("border-color")}} properties, which accept different values for each side. Alternatively, you can target one border at a time with the physical (e.g., {{Cssxref("border-top")}} ) and logical (e.g., {{Cssxref("border-block-start")}}) border properties.

### Borders vs. outlines

Borders and [outlines](/en-US/docs/Web/CSS/outline) are very similar. However, outlines differ from borders in the following ways:

- Outlines never take up space, as they are drawn outside of an element's content.
- According to the spec, outlines don't have to be rectangular, although they usually are.

## Formal definition

{{cssinfo}}

## Formal syntax

{{csssyntax}}

## Examples

### Setting a pink outset border

#### HTML

\`\`\`html
<div>I have a border, an outline, and a box shadow! Amazing, isn't it?</div>
\`\`\`

#### CSS

\`\`\`css
div {
  border: 0.5rem outset pink;
  outline: 0.5rem solid khaki;
  box-shadow: 0 0 0 2rem skyblue;
  border-radius: 12px;
  font: bold 1rem sans-serif;
  margin: 2rem;
  padding: 1rem;
  outline-offset: 0.5rem;
}
\`\`\`

#### Result

{{EmbedLiveSample('Setting_a_pink_outset_border')}}

## Specifications

{{Specifications}}

## Browser compatibility

{{Compat}}

## See also

- {{Cssxref("border-width")}}
- {{Cssxref("border-style")}}
- {{Cssxref("border-color")}}
- {{Cssxref("outline")}}
- [Backgrounds and borders](/en-US/docs/Web/CSS/CSS_backgrounds_and_borders)
- [Learn CSS: Backgrounds and borders](/en-US/docs/Learn_web_development/Core/Styling_basics/Backgrounds_and_borders)
"
`;

exports[`optimisticallyFindMDNFile returns MDN doc when provided valid parameters 1`] = `
"---
title: RegExp.prototype[Symbol.split]()
short-title: "[Symbol.split]()"
slug: Web/JavaScript/Reference/Global_Objects/RegExp/Symbol.split
page-type: javascript-instance-method
browser-compat: javascript.builtins.RegExp.@@split
sidebar: jsref
---

The **\`[Symbol.split]()\`** method of {{jsxref("RegExp")}} instances specifies how [\`String.prototype.split\`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split) should behave when the regular expression is passed in as the separator.

{{InteractiveExample("JavaScript Demo: RegExp.prototype[Symbol.split]()")}}

\`\`\`js interactive-example
class RegExp1 extends RegExp {
  [Symbol.split](str, limit) {
    const result = RegExp.prototype[Symbol.split].call(this, str, limit);
    return result.map((x) => \`(\${x})\`);
  }
}

console.log("2016-01-02".split(new RegExp1("-")));
// Expected output: Array ["(2016)", "(01)", "(02)"]

console.log("2016-01-02".split(/-/));
// Expected output: Array ["2016", "01", "02"]
\`\`\`

## Syntax

\`\`\`js-nolint
regexp[Symbol.split](str)
regexp[Symbol.split](str, limit)
\`\`\`

### Parameters

- \`str\`
  - : The target of the split operation.
- \`limit\` {{optional_inline}}
  - : Integer specifying a limit on the number of splits to be found. The \`[Symbol.split]()\` method still splits on every match of \`this\` RegExp pattern (or, in the Syntax above, \`regexp\`), until the number of split items match the \`limit\` or the string falls short of \`this\` pattern.

### Return value

An {{jsxref("Array")}} containing substrings as its elements. Capturing groups are included.

## Description

This method is called internally in {{jsxref("String.prototype.split()")}} when a \`RegExp\` is passed as the separator. For example, the following two examples return the same result.

\`\`\`js
"a-b-c".split(/-/);

/-/[Symbol.split]("a-b-c");
\`\`\`

This method exists for customizing the behavior of \`split()\` in \`RegExp\` subclasses.

The \`RegExp.prototype[Symbol.split]()\` base method exhibits the following behaviors:

- It starts by using [\`[Symbol.species]\`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/Symbol.species) to construct a new regexp, thus avoiding mutating the original regexp in any way.
- The regexp's \`g\` ("global") flag is ignored, and the \`y\` ("sticky") flag is always applied even when it was not originally present.
- If the target string is empty, and the regexp can match empty strings (for example, \`/a?/\`), an empty array is returned. Otherwise, if the regexp can't match an empty string, \`[""]\` is returned.
- The matching proceeds by continuously calling \`this.exec()\`. Since the regexp is always sticky, this will move along the string, each time yielding a matching string, index, and any capturing groups.
- For each match, the substring between the last matched string's end and the current matched string's beginning is first appended to the result array. Then, the capturing groups' values are appended one-by-one.
- If the current match is an empty string, or if the regexp doesn't match at the current position (since it's sticky), the \`lastIndex\` would still be advanced — if the regex is [Unicode-aware](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/unicode#unicode-aware_mode), it would advance by one Unicode code point; otherwise, it advances by one UTF-16 code unit.
- If the regexp doesn't match the target string, the target string is returned as-is, wrapped in an array.
- The returned array's length will never exceed the \`limit\` parameter, if provided, while trying to be as close as possible. Therefore, the last match and its capturing groups may not all be present in the returned array if the array is already filled.

## Examples

### Direct call

This method can be used in almost the same way as
{{jsxref("String.prototype.split()")}}, except the different \`this\` and the
different order of arguments.

\`\`\`js
const re = /-/g;
const str = "2016-01-02";
const result = re[Symbol.split](str);
console.log(result); // ["2016", "01", "02"]
\`\`\`

### Using \`[Symbol.split]()\` in subclasses

Subclasses of {{jsxref("RegExp")}} can override the \`[Symbol.split]()\` method to
modify the default behavior.

\`\`\`js
class MyRegExp extends RegExp {
  [Symbol.split](str, limit) {
    const result = RegExp.prototype[Symbol.split].call(this, str, limit);
    return result.map((x) => \`(\${x})\`);
  }
}

const re = new MyRegExp("-");
const str = "2016-01-02";
const result = str.split(re); // String.prototype.split calls re[Symbol.split]().
console.log(result); // ["(2016)", "(01)", "(02)"]
\`\`\`

## Specifications

{{Specifications}}

## Browser compatibility

{{Compat}}

## See also

- [Polyfill of \`RegExp.prototype[Symbol.split]\` in \`core-js\`](https://github.com/zloirock/core-js#ecmascript-string-and-regexp)
- {{jsxref("String.prototype.split()")}}
- [\`RegExp.prototype[Symbol.match]()\`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/Symbol.match)
- [\`RegExp.prototype[Symbol.matchAll]()\`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/Symbol.matchAll)
- [\`RegExp.prototype[Symbol.replace]()\`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/Symbol.replace)
- [\`RegExp.prototype[Symbol.search]()\`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/Symbol.search)
- {{jsxref("RegExp.prototype.exec()")}}
- {{jsxref("RegExp.prototype.test()")}}
- {{jsxref("Symbol.split")}}
"
`;

exports[`optimisticallyFindMDNFile returns MDN doc when provided valid parameters 2`] = `
"---
title: "HTML attribute: dirname"
short-title: dirname
slug: Web/HTML/Reference/Attributes/dirname
page-type: html-attribute
browser-compat:
  - html.elements.textarea.dirname
  - html.elements.input.dirname
sidebar: htmlsidebar
---

The **\`dirname\`** attribute can be used on the {{htmlelement("textarea")}} element and several {{htmlelement("input")}} types and describes the directionality of the element's text content during form submission.
The browser uses this attribute's value to determine whether text the user has entered is left-to-right or right-to-left oriented.
When used, the element's text directionality value is included in form submission data along with the \`dirname\` attribute's value as the name of the field.

## Usage notes

The \`dirname\` attribute can be used on any {{htmlelement("textarea")}} element, or any {{htmlelement("input")}} element with {{htmlelement("input/hidden", "hidden")}}, {{htmlelement("input/text", "text")}}, {{htmlelement("input/search", "search")}}, {{htmlelement("input/tel", "tel")}}, {{htmlelement("input/url", "url")}}, {{htmlelement("input/email", "email")}}, {{htmlelement("input/password", "password")}}, {{htmlelement("input/submit", "submit")}}, {{htmlelement("input/reset", "reset")}} or {{htmlelement("input/button", "button")}} type.

The format of the submitted data is \`{dirname_value}={direction}\` where \`{dirname_value}\` is the value of the \`dirname\` attribute and \`{direction}\` is the directionality of the text.
For example, if the user enters "Hello" in an element with the attributes \`name="comment"\` and \`dirname="comment-direction"\`, the URL-encoded form submission data for \`GET\` requests will be \`comment=Hello&comment-direction=ltr\`.
The directionality is one of the following:

- \`rtl\`
  - : The text entered by the user is in a right-to-left writing direction.
- \`ltr\`
  - : The text entered by the user is in a left-to-right writing direction.

If no text directionality is specified, the user agent will use the directionality of the parent element containing the form, and if that is not specified, the default directionality of the user agent.

## Examples

### Textarea element directionality

In this example, the \`dir="auto"\` attribute on the textarea element allows the text directionality to be determined automatically based on the text entered by the user:

\`\`\`html
<form method="get" action="https://www.example.com/submit">
  <textarea name="comment" dir="auto" dirname="comment-direction">سيب</textarea>
  <button type="submit">Send my greetings</button>
</form>
\`\`\`

When the user submits the form, the user agent includes two fields, one called \`comment\` with the value "سيب", and one called \`comment-direction\` with the value "rtl".
The URL-encoded submission body looks like this:

\`\`\`url
https://www.example.com/submit?comment=%D8%B3%D9%8A%D8%A8&comment-direction=rtl
\`\`\`

### Input element directionality

In this example, the \`dir="auto"\` attribute on the input element allows the text directionality to be determined automatically based on the text entered by the user:

\`\`\`html
<form method="get" action="https://www.example.com/submit">
  <input
    type="text"
    name="comment-input"
    dir="auto"
    dirname="comment-direction"
    value="Hello" />
  <button type="submit">Send my greetings</button>
</form>
\`\`\`

When the user submits the form, the user agent includes two fields, one called \`comment-input\` with the value "Hello", and one called \`comment-direction\` with the value "ltr":

\`\`\`url
https://www.example.com/submit?comment-input=Hello&comment-direction=ltr
\`\`\`

### Inheriting directionality

The following \`<input>\` and \`<textarea>\` elements do not have a \`dir\` attribute, so they inherit the explicit directionality of their parent element, which is \`rtl\`:

\`\`\`html
<div dir="rtl">
  <form method="get" action="https://www.example.com/submit">
    <input
      type="text"
      name="user"
      dirname="user-direction"
      value="LTR Username" />
    <textarea name="comment" dirname="comment-direction">LTR Comment</textarea>
    <button type="submit">Post Comment</button>
  </form>
</div>
\`\`\`

The URL-encoded submission body looks like this:

\`\`\`url
https://www.example.com/submit?user=LTR+Username&user-direction=rtl&comment=LTR+Comment&comment-direction=rtl
\`\`\`

## Specifications

{{Specifications}}

## Browser compatibility

{{Compat}}

## See also

- [\`dir\` attribute](/en-US/docs/Web/HTML/Reference/Global_attributes/dir)
- {{htmlelement("input")}}
- {{htmlelement("textarea")}}
"
`;

exports[`optimisticallyFindMDNFile returns MDN doc when provided valid parameters 3`] = `
"---
title: font-family
slug: Web/CSS/@font-face/font-family
page-type: css-at-rule-descriptor
browser-compat: css.at-rules.font-face.font-family
sidebar: cssref
---

The **\`font-family\`** CSS descriptor sets the font family for a font specified in an {{cssxref("@font-face")}} at-rule.

The value is used for name matching against a particular \`@font-face\` when styling elements using the [\`font-family\`](/en-US/docs/Web/CSS/font-family) property.
Any name may be used, and this overrides any name specified in the underlying font data.

## Syntax

\`\`\`css
/* <string> values */
font-family: "font family";
font-family: "another font family";

/* <custom-ident> value */
font-family: example-font;
\`\`\`

### Values

- \`<family-name>\`
  - : Specifies the name of the font family.

## Formal definition

{{cssinfo}}

## Formal syntax

{{csssyntax}}

## Examples

### Setting the font family name

\`\`\`css
@font-face {
  font-family: "Some font family";
  src: url("some_font_name.ttf");
}
\`\`\`

## Specifications

{{Specifications}}

## Browser compatibility

{{Compat}}

## See also

- {{cssxref("@font-face/font-display", "font-display")}}
- {{cssxref("@font-face/font-stretch", "font-stretch")}}
- {{cssxref("@font-face/font-style", "font-style")}}
- {{cssxref("@font-face/font-weight", "font-weight")}}
- {{cssxref("font-feature-settings", "font-feature-settings")}}
- {{cssxref("@font-face/font-variation-settings", "font-variation-settings")}}
- {{cssxref("@font-face/src", "src")}}
- {{cssxref("@font-face/unicode-range", "unicode-range")}}
"
`;
